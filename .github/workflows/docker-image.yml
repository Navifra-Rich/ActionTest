name: core build

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

env:
    TAG: ${{ github.ref_name }}

jobs:
    build:
        runs-on: core-runner
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                token: ${{ secrets.CI_TOKEN }} # GitHub Actions의 기본 인증 토큰
                submodules: true
            
            - name: Add CATKIN_IGNORE to lib_* directories
              run: |
                  chmod +x scripts/disable_lib.sh && bash ./scripts/disable_lib.sh

            - name: Build
              run: |
                source /opt/ros/noetic/setup.bash
                catkin_make -j8 -DCMAKE_BUILD_TYPE=Release -DLICENSE=OFF -DCATKIN_BLACKLIST_PACKAGES="pf_driver;nc_mpino_driver;psen_scan_v2"

            - name: Run Unit Tests
              run: |
                  source /opt/ros/noetic/setup.bash
                  catkin_make run_tests
                  
    lib_core:
        runs-on: core-runner
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                token: ${{ secrets.CI_TOKEN }} # GitHub Actions의 기본 인증 토큰
                submodules: true          

            - name: Build
              run: |
                source /opt/ros/noetic/setup.bash
                catkin_make -j8 -DCMAKE_BUILD_TYPE=Release -DLICENSE=OFF -DCATKIN_BLACKLIST_PACKAGES="pf_driver;nc_mpino_driver;psen_scan_v2"
    final-job:
        runs-on: core-runner
        needs: [build, lib_core]
        steps:
          - name: Checkout
            uses: actions/checkout@v4
            with:
              token: ${{ secrets.CI_TOKEN }}
              submodules: true   
              
          - name: Build
            run: |
              source /opt/ros/noetic/setup.bash
              catkin_make -j8 install -DCMAKE_BUILD_TYPE=Release -DLICENSE=OFF -DCATKIN_BLACKLIST_PACKAGES="pf_driver;nc_mpino_driver;psen_scan_v2"

          - name: Add DockerEnv
            run: echo "SHA_TAG=core.${GITHUB_SHA:0:8}" >> $GITHUB_ENV

          - name: Set up QEMU
            uses: docker/setup-qemu-action@v3

          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v3
             
          - name: Login to Docker Hub
            uses: docker/login-action@v3
            with:
              username: ${{ secrets.DOCKERHUB_USERNAME }}
              password: ${{ secrets.DOCKERHUB_TOKEN }}

          - name: Build and push Docker images
            uses: docker/build-push-action@v3
            with:
              context: .
              push: true
              tags: navifra/robot:${{ env.SHA_TAG }}
              cache-from: type=gha
              cache-to: type=gha,mode=max
              file: scripts/Dockerfile.emul
